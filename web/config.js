// Configura√ß√µes do servidor e credenciais
// Importa√ß√£o do Supabase (ser√° carregado via CDN no HTML)
// Inicializa√ß√£o do cliente Supabase
let supabaseClient = null;

// Fun√ß√£o para inicializar o cliente Supabase
function initSupabase() {
  if (typeof supabase !== 'undefined' && window.supabaseConfig) {
    supabaseClient = supabase.createClient(
      window.supabaseConfig.SUPABASE_URL,
      window.supabaseConfig.SUPABASE_KEY,
      {
        auth: window.supabaseConfig.auth
      }
    );
    console.log('Supabase client inicializado');
    return supabaseClient;
  } else {
    console.warn('Supabase n√£o est√° dispon√≠vel ou n√£o est√° configurado');
    return null;
  }
}

// Configura√ß√£o principal do aplicativo
const config = {
  // Credenciais de usu√°rios para demonstra√ß√£o - estes s√£o os √∫nicos que funcionam no modo demonstra√ß√£o
  users: [
    {
      id: 'demo1',
      email: 'demo@solarsim.com',
      password: 'demo123',
      name: 'Usu√°rio Demo',
      avatar: 'D',
      type: 'demo',
      registrationDate: '2023-01-01T00:00:00.000Z',
      lastLogin: new Date().toISOString()
    },
    {
      id: 'admin1',
      email: 'admin@solarsim.com',
      password: 'admin123',
      name: 'Administrador',
      avatar: 'A',
      type: 'admin',
      registrationDate: '2023-01-01T00:00:00.000Z',
      lastLogin: new Date().toISOString()
    }
  ],
  
  // Configura√ß√µes do servidor
  server: {
    apiUrl: 'https://meteo-mapa-api.netlify.app/.netlify/functions/api',
    weatherApiKey: 'demo_key_123456',
    // Chave API segura do MapTiler (gratuita para uso p√∫blico)
    mapTilerApiKey: 'jvSusSYXzlB0Qg0YEpFo'
  },
  
  // Configura√ß√µes do aplicativo
  app: {
    name: 'SolarSim',
    version: '1.0.0',
    defaultTheme: 'light',
    autoLogin: false, // Desativa o login autom√°tico por padr√£o
    testMode: false, // Desativa o modo de teste para usar a autentica√ß√£o real
    localStorageEnabled: true, // Verificado na inicializa√ß√£o para garantir que o armazenamento local funcione
    cookiesEnabled: true // Verificado na inicializa√ß√£o para garantir que cookies funcionem
  },
  
  // Pain√©is solares dispon√≠veis
  solarPanels: [
    {
      id: 'monocristalino',
      name: 'Monocristalino',
      icon: '‚òÄÔ∏è',
      color: '#3b82f6',
      efficiency: 21,
      range: '18% ‚Äì 23%',
      description: 'Alta efici√™ncia e durabilidade, ideal para espa√ßos limitados.',
      performance: {
        solarRadiation: 0.95, // Efici√™ncia com radia√ß√£o solar
        temperature: 0.90, // Resist√™ncia a altas temperaturas
        lifetime: 30 // Anos de vida √∫til
      }
    },
    {
      id: 'perc',
      name: 'PERC (monopremium)',
      efficiency: 22,
      range: '20% ‚Äì 24%',
      color: '#8b5cf6',
      description: 'Tecnologia avan√ßada com melhor desempenho em condi√ß√µes de pouca luz.',
      icon: 'üîÜ'
    },
    {
      id: 'bifacial',
      name: 'Bifacial',
      efficiency: 21,
      range: '19% ‚Äì 23% + 10-20%',
      color: '#ec4899',
      description: 'Captura luz de ambos os lados, aumentando a produ√ß√£o em at√© 20%.',
      icon: '‚ö°'
    },
    {
      id: 'policristalino',
      name: 'Policristalino',
      efficiency: 17,
      range: '15% ‚Äì 18%',
      color: '#10b981',
      description: 'Boa rela√ß√£o custo-benef√≠cio, ideal para grandes instala√ß√µes.',
      icon: 'üåû'
    },
    {
      id: 'filme-fino',
      name: 'Filme Fino',
      efficiency: 12,
      range: '10% ‚Äì 13%',
      color: '#f59e0b',
      description: 'Flex√≠vel e leve, ideal para superf√≠cies curvas ou aplica√ß√µes especiais.',
      icon: 'üì±'
    }
  ]
};

// Exporta a configura√ß√£o para uso em outros arquivos
if (typeof module !== 'undefined' && module.exports) {
  module.exports = config;
} else {
  window.appConfig = config;
}

// ----- Fun√ß√µes de gerenciamento de usu√°rios -----

// Verifica se o armazenamento local est√° dispon√≠vel
window.isStorageAvailable = function(type) {
  try {
    const storage = window[type];
    const x = '__storage_test__';
    storage.setItem(x, x);
    storage.removeItem(x);
    return true;
  } catch (e) {
    return false;
  }
};

// Inicializa o sistema de armazenamento ao carregar
(function() {
  if (typeof window !== 'undefined') {
    // Verifica se o localStorage est√° dispon√≠vel
    window.appConfig.app.localStorageEnabled = window.isStorageAvailable('localStorage');
    console.log('LocalStorage dispon√≠vel:', window.appConfig.app.localStorageEnabled);
    
    // Inicializa a lista de usu√°rios registrados se n√£o existir
    if (window.appConfig.app.localStorageEnabled) {
      try {
        if (!localStorage.getItem('registeredUsers')) {
          localStorage.setItem('registeredUsers', JSON.stringify([]));
        }
      } catch (e) {
        console.error('Erro ao inicializar armazenamento:', e);
      }
    }
  }
})();

// Fun√ß√£o helper para verificar se o usu√°rio est√° logado
window.isUserLoggedIn = function() {
  // Se o modo de teste estiver ativado, considera logado para fins de demonstra√ß√£o
  if (window.appConfig.app.testMode) return true;
  
  // Verifica primeiro no sessionStorage (sess√£o atual)
  if (sessionStorage.getItem('currentUser')) return true;
  
  // Se n√£o encontrou na sess√£o, tenta recuperar do localStorage
  if (window.appConfig.app.localStorageEnabled && localStorage.getItem('lastLoggedUser')) {
    // Recupera o usu√°rio e salva na sess√£o atual
    try {
      const savedUser = JSON.parse(localStorage.getItem('lastLoggedUser'));
      if (savedUser) {
        sessionStorage.setItem('currentUser', JSON.stringify(savedUser));
        return true;
      }
    } catch (e) {
      console.error('Erro ao recuperar usu√°rio do localStorage:', e);
    }
  }
  
  return false;
};

// Obt√©m o usu√°rio atual
window.getCurrentUser = function() {
  // Se estiver no modo de teste e n√£o houver usu√°rio logado, usa o usu√°rio demo
  if (window.appConfig.app.testMode && !sessionStorage.getItem('currentUser')) {
    return window.appConfig.users[0]; // Retorna o usu√°rio demo em modo de teste
  }
  
  // Tenta obter o usu√°rio da sess√£o atual
  try {
    const userDataSession = sessionStorage.getItem('currentUser');
    if (userDataSession) {
      return JSON.parse(userDataSession);
    }
    
    // Se n√£o encontrou na sess√£o, tenta recuperar do localStorage
    if (window.appConfig.app.localStorageEnabled) {
      const userDataLocal = localStorage.getItem('lastLoggedUser');
      if (userDataLocal) {
        const userData = JSON.parse(userDataLocal);
        // Salva na sess√£o atual para uso futuro
        sessionStorage.setItem('currentUser', userDataLocal);
        return userData;
      }
    }
  } catch (e) {
    console.error('Erro ao obter usu√°rio atual:', e);
  }
  
  return null;
};

// Login de usu√°rio usando Supabase
window.loginUser = async function(email, password) {
  // Verifica se o Supabase est√° dispon√≠vel
  if (supabaseClient) {
    try {
      const { data, error } = await supabaseClient.auth.signInWithPassword({
        email: email,
        password: password
      });
      
      if (error) {
        console.error('Erro ao fazer login com Supabase:', error.message);
        return { success: false, error: error.message };
      }
      
      // Login bem-sucedido
      const user = data.user;
      
      // Salva os dados do usu√°rio na sess√£o
      sessionStorage.setItem('currentUser', JSON.stringify({
        id: user.id,
        email: user.email,
        name: user.user_metadata.name || user.email.split('@')[0],
        avatar: user.user_metadata.avatar || user.email[0].toUpperCase(),
        type: user.user_metadata.type || 'user',
        lastLogin: new Date().toISOString()
      }));
      
      // Se o localStorage estiver dispon√≠vel, salva tamb√©m para persist√™ncia
      if (window.appConfig.app.localStorageEnabled) {
        localStorage.setItem('lastLoggedUser', sessionStorage.getItem('currentUser'));
      }
      
      return { success: true, user: user };
    } catch (e) {
      console.error('Erro inesperado ao fazer login:', e);
      return { success: false, error: 'Erro inesperado ao fazer login' };
    }
  } else if (!user) {
    return { success: false, error: 'Dados de usu√°rio inv√°lidos' };
  } else {
    // Fallback para o sistema de login original quando Supabase n√£o est√° dispon√≠vel
    try {
      // Salva os dados do usu√°rio na sess√£o atual
    sessionStorage.setItem('currentUser', JSON.stringify(user));
    
    // Se o localStorage estiver dispon√≠vel, salva tamb√©m para persist√™ncia
    if (window.appConfig.app.localStorageEnabled) {
      localStorage.setItem('lastLoggedUser', JSON.stringify(user));
    }
    
    console.log('Usu√°rio logado com sucesso:', user.name);
    return true;
  } catch (e) {
    console.error('Erro ao fazer login:', e);
    return false;
  }
};

// Logout de usu√°rio
window.logoutUser = async function() {
  // Verifica se o Supabase est√° dispon√≠vel
  if (supabaseClient) {
    try {
      const { error } = await supabaseClient.auth.signOut();
      
      if (error) {
        console.error('Erro ao fazer logout com Supabase:', error.message);
        return false;
      }
      
      // Remove da sess√£o atual
      sessionStorage.removeItem('currentUser');
      
      // N√£o remove do localStorage para permitir login f√°cil posteriormente
      // mas marca como deslogado
      if (window.appConfig.app.localStorageEnabled) {
        const savedUser = localStorage.getItem('lastLoggedUser');
        if (savedUser) {
          const userData = JSON.parse(savedUser);
          userData.isLoggedOut = true;
          localStorage.setItem('lastLoggedUser', JSON.stringify(userData));
        }
      }
      
      console.log('Logout realizado com sucesso');
      return true;
    } catch (e) {
      console.error('Erro ao fazer logout:', e);
      return false;
    }
  } else {
    // Fallback para o sistema de logout original quando Supabase n√£o est√° dispon√≠vel
    try {
      // Remove da sess√£o atual
      sessionStorage.removeItem('currentUser');
      
      // N√£o remove do localStorage para permitir login f√°cil posteriormente
      // mas marca como deslogado
      if (window.appConfig.app.localStorageEnabled) {
        const savedUser = localStorage.getItem('lastLoggedUser');
        if (savedUser) {
          const userData = JSON.parse(savedUser);
          userData.isLoggedOut = true;
          localStorage.setItem('lastLoggedUser', JSON.stringify(userData));
        }
      }
      
      console.log('Logout realizado com sucesso');
      return true;
    } catch (e) {
      console.error('Erro ao fazer logout:', e);
      return false;
    }
  }
};

// Funu00e7u00e3o helper para obter o usuu00e1rio atual
window.getCurrentUser = function() {
  if (window.appConfig.app.testMode && !sessionStorage.getItem('currentUser')) {
    return window.appConfig.users[0]; // Retorna o usuu00e1rio demo em modo de teste
  }
  const userData = sessionStorage.getItem('currentUser');
  return userData ? JSON.parse(userData) : null;
};

// Registra um novo usu√°rio
window.registerUser = async function(userData) {
  if (!userData || !userData.email || !userData.password || !userData.name) {
    console.error('Dados de usu√°rio inv√°lidos para registro');
    return { success: false, error: 'Dados de usu√°rio inv√°lidos para registro' };
  }
  
  // Verifica se o Supabase est√° dispon√≠vel
  if (supabaseClient) {
    try {
      // Registra o usu√°rio no Supabase
      const { data, error } = await supabaseClient.auth.signUp({
        email: userData.email,
        password: userData.password,
        options: {
          data: {
            name: userData.name,
            avatar: userData.avatar || userData.name.charAt(0).toUpperCase(),
            type: 'user'
          }
        }
      });
      
      if (error) {
        console.error('Erro ao registrar com Supabase:', error.message);
        return { success: false, error: error.message };
      }
      
      // Registro bem-sucedido
      console.log('Usu√°rio registrado com sucesso:', userData.name);
      
      // Se o registro for bem-sucedido mas precisar de confirma√ß√£o de email
      if (data?.user && data?.session === null) {
        return { 
          success: true, 
          requiresEmailConfirmation: true,
          message: 'Registro realizado com sucesso! Por favor, verifique seu email para confirmar sua conta.'
        };
      }
      
      // Se o registro for bem-sucedido e j√° estiver logado
      if (data?.user && data?.session) {
        // Salva os dados do usu√°rio na sess√£o
        const user = data.user;
        sessionStorage.setItem('currentUser', JSON.stringify({
          id: user.id,
          email: user.email,
          name: user.user_metadata.name || user.email.split('@')[0],
          avatar: user.user_metadata.avatar || user.email[0].toUpperCase(),
          type: user.user_metadata.type || 'user',
          lastLogin: new Date().toISOString()
        }));
        
        // Se o localStorage estiver dispon√≠vel, salva tamb√©m para persist√™ncia
        if (window.appConfig.app.localStorageEnabled) {
          localStorage.setItem('lastLoggedUser', sessionStorage.getItem('currentUser'));
        }
        
        return { success: true, user: user };
      }
      
      return { success: true, message: 'Registro realizado com sucesso!' };
    } catch (e) {
      console.error('Erro inesperado ao registrar usu√°rio:', e);
      return { success: false, error: 'Erro inesperado ao registrar usu√°rio' };
    }
  } else {
    // Fallback para o sistema de registro original quando Supabase n√£o est√° dispon√≠vel
    try {
      const newUser = {
        id: 'user_' + Date.now(),
        email: userData.email,
        password: userData.password,
        name: userData.name,
        avatar: userData.avatar || userData.name.charAt(0).toUpperCase(),
        type: 'user',
        registrationDate: new Date().toISOString(),
        lastLogin: new Date().toISOString()
      };
      
      // Se o localStorage estiver dispon√≠vel, salva o usu√°rio na lista de registrados
      if (window.appConfig.app.localStorageEnabled) {
        let usersList = [];
        const savedUsers = localStorage.getItem('registeredUsers');
        
        if (savedUsers) {
          usersList = JSON.parse(savedUsers);
        }
        
        // Verifica se o email j√° est√° sendo usado
        if (usersList.some(user => user.email === newUser.email)) {
          console.error('Email j√° est√° em uso');
          return { success: false, error: 'Email j√° est√° em uso' };
        }
        
        // Adiciona o novo usu√°rio √† lista
        usersList.push(newUser);
        localStorage.setItem('registeredUsers', JSON.stringify(usersList));
      }
      
      // Faz login com o novo usu√°rio
      const loginResult = await window.loginUser(newUser.email, newUser.password);
      return loginResult.success ? { success: true, user: newUser } : { success: false, error: 'Falha ao fazer login ap√≥s registro' };
    } catch (e) {
      console.error('Erro ao registrar usu√°rio:', e);
      return { success: false, error: 'Erro ao registrar usu√°rio' };
    }
  }
};